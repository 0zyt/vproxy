################################################
#          The discovery config scope          #
################################################
# The instance runs a discovery for neighbours, and do NOT require you to
# specify a node to "join". The neighbours will be automatically discovered.
# The search method will be explained in detail in discovery search scope.

# discovery.nic: the nic for discovering nodes
#
# This field should be set to a name of an existing nic of the host machine,
# e.g. eth0, lo0 (usually for testing and examples)
# All network handling of discovery will be operated on the specified nic.
discovery.nic = eth0

# discovery.ip_type: v4|v6
# Specify to use ipv4 or ipv6 on the nic.
discovery.ip_type = v4

# discovery.udp_sock_port: the port of a udp sock to send searching packets
#
# The discovery module will use this port to send udp packets to other nodes.
# The port can be any valid port.
discovery.udp_sock_port = 56565

# discovery.udp_port: the udp discovery server listening port
#
# The discovery module starts a udp server to listen for "node existence" messages.
# This port should between "min_udp_port" and "max_udp_port".
# Usually specify the port number same as the "tcp_port" for debug purpose.
discovery.udp_port = 31000

# discovery.tcp_port: the tcp discovery server listening port
#
# The discovery module starts a tcp server to listen for "node data" messages.
# This port can be any valid port.
# Usually specify the port number same as the "udp_port" for debug purpose.
discovery.tcp_port = 31000

################################################
#        The discovery searching scope         #
################################################
# The vproxy discovery module sends packets to all endpoints of specified
# network and port range to discover new nodes. The node will send a udp
# packet with local cached node hash, and the nodes who received the packet
# will check the hash and respond it's calculated hash if two hash values don't match.
#
# When receiving a different hash response, the node make a tcp connection
# to fetch all cached nodes from the remote endpoint, add add missing nodes
# to local cache, and start health check on for the added nodes.
# If the node is DOWN, it will be removed from cached node list.

# discovery.search.mask: the network mask for node searching
#
# An integer representing the network mask
# Should be 0~32 if ipv4, or 0~128 if ipv6.
# The searching network will be (nic ip & mask)
discovery.search.mask = 24

# discovery.search.min_udp_port: the searching port range bottom
#
# An integer representing a port (inclusive).
discovery.search.min_udp_port = 31000

# discovery.search.min_udp_port: the searching port range cap
#
# An integer representing a port (inclusive).
discovery.search.max_udp_port = 31000
