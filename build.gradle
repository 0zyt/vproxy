import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'application'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'org.jetbrains.dokka' version "1.5.30"
    id 'maven-publish'
    id 'signing'

    id 'org.openjfx.javafxplugin' version '0.0.10' apply false
}

ext {
    versionTs = System.currentTimeMillis()
}

group 'io.vproxy'
version loadVersion()

mainClassName = 'io.vproxy.app.app.Main'

jar {
    archiveName 'vproxy.jar'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    exclude 'module-info.class'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy 'exclude'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'io.vproxy'
    version loadVersion()

    java {
        withSourcesJar()
    }

    sourceCompatibility = 11.0
    targetCompatibility = 11.0
    compileKotlin {
        kotlinOptions {
            jvmTarget = '11'
            freeCompilerArgs += '-Xjvm-default=enable'
            freeCompilerArgs += '-Xassertions=jvm'
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '11'
            freeCompilerArgs += '-Xjvm-default=enable'
            freeCompilerArgs += '-Xassertions=jvm'
        }
    }
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task buildJavaDoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputDirectory = javadoc.destinationDir
        dokkaSourceSets {
            sourceSet {
                sourceRoot(file("src/main/java"))
            }
        }
    }
    task javadocJar(type: Jar, dependsOn: buildJavaDoc) {
        classifier = 'javadoc'
        from "$buildDir/docs/javadoc"
    }

    if (!['test', 'ui'].contains(project.name)) {
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifactId 'vproxy-' + project.name

                artifact(javadocJar)

                pom {
                    name = 'io.vproxy.' + project.name
                    description = 'vproxy component ' + project.name
                    url = 'https://vproxy.io'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/wkgcass/vproxy/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'wkgcass'
                            name = 'K.G. Wang'
                            email = 'wkgcass@hotmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/wkgcass/vproxy.git'
                        developerConnection = 'scm:git:git://github.com/wkgcass/vproxy.git'
                        url = 'https://github.com/wkgcass/vproxy'
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username 'wkgcass'
                    password System.getProperty("MavenPublishPassword")
                }
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.contains('-DEV') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
    if (!System.getProperty("MavenLocalInstall", "false").equals("true")) {
    signing {
        sign publishing.publications.maven
    }
    }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

project(':dep') {
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }
    dependencies {
        api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.5.31'
        api group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-jvm', version: '1.5.2'
    }
}

project(':base') {
    compileJava {
        options.compilerArgs += '--add-exports=java.base/jdk.internal.misc=io.vproxy.base'
        options.compilerArgs += ["-h", project.rootProject.projectDir.absolutePath + "/base/src/main/c"]
    }
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':dep')
    }
}

project(':lib') {
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':base')
    }
}

project(':core') {
    compileJava {
        options.compilerArgs += ["-h", project.rootProject.projectDir.absolutePath + "/base/src/main/c"]
    }

    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':base')
        api project(':lib')
    }
}

project(':extended') {
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':base')
        api project(':core')
        api project(':lib')
    }
}

project(':app') {
    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':base')
        api project(':core')
        api project(':lib')
        api project(':extended')
    }
}

project(':all') {
    dependencies {
        api project(':dep')
        api project(':base')
        api project(':lib')
        api project(':core')
        api project(':extended')
        api project(':app')
    }
}

project(':ui') {
    apply plugin: 'org.openjfx.javafxplugin'

    javafx {
        version = '11'
        modules = ['javafx.controls', 'javafx.swing', 'javafx.media']
    }

    compileKotlin {
        destinationDir = compileJava.destinationDir
    }

    dependencies {
        api project(':all')
        api group: 'io.vproxy', name: 'vfx', version: '1.2.0'
    }

    jar {
        archiveName 'vproxy-ui.jar'
        exclude 'module-info.class'
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        duplicatesStrategy 'exclude'
    }
}

project(':test') {
    compileTestKotlin {
        destinationDir = compileTestJava.destinationDir
    }

    dependencies {
        api project(':base')
        api project(':core')
        api project(':extended')
        api project(':lib')
        api project(':app')

        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'io.vertx', name: 'vertx-redis-client', version: '3.7.0'
        testImplementation group: 'io.vertx', name: 'vertx-web-client', version: '3.7.0'
        testImplementation group: 'io.grpc', name: 'grpc-all', version: '1.20.0'
        testImplementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
        testImplementation group: 'org.apache.thrift', name: 'libthrift', version: '0.11.0'
        testImplementation group: 'com.alibaba', name: 'dubbo', version: '2.6.6'
        testImplementation group: 'org.ow2.asm', name: 'asm', version: '9.2'
    }

    task runSuite(type: Test) {
        jvmArgs += '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED'

        testLogging {
            events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
            maxGranularity 100
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }

        include '**/VSuite.class'
    }

    task runCI(type: Test) {
        jvmArgs += '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED'

        testLogging {
            events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
            maxGranularity 100
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }

        include '**/CI.class'
    }

    task runTest {
        dependsOn clean
        dependsOn runSuite
        dependsOn runCI
    }

    task runSingleTest(type: Test) {
        outputs.upToDateWhen { return false }

        doFirst {
            def c = System.getProperty("case")
            if (c == null) {
                def message = "missing test case to run, specify it with -Dcase"
                println(message)
                throw new Exception(message)
            }

            jvmArgs += '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED'

            testLogging {
                events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
                maxGranularity 100
                exceptionFormat "full"
                showCauses true
                showExceptions true
                showStackTraces true
            }

            include '**/' + c + '.class'
        }
    }

    task XDPPoc(type: JavaExec) {
        if (!org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            return
        }

        if ("true" == System.getProperty("enableAssertions")) {
            enableAssertions = true
        }
        classpath = sourceSets.test.runtimeClasspath
        workingDir = project.rootProject.rootDir.getAbsolutePath()
        systemProperty("java.library.path", "/usr/lib/" + "uname -m".execute().text.trim() + "-linux-gnu:base/src/main/c:base/src/main/c/xdp/libbpf/src")
        systemProperty("vfd", "posix")
        main = "io.vproxy.poc.XDPPoc"
        if (System.getProperty("ver") != null) {
            main += System.getProperty("ver")
        }

        if (System.getProperty("ifname") != null) {
            args = [System.getProperty("ifname")]
        }
    }

    task GenerateModuleInfo(type: JavaExec) {
        classpath = sourceSets.test.runtimeClasspath
        workingDir = project.rootProject.rootDir.getAbsolutePath()
        main = "io.vproxy.buildtools.ModuleInfoGenerator"
    }
}

dependencies {
    api project(':all')
    testImplementation project(':test')
}

def loadVersion() {
    def PREFIX = "public static final String VERSION = \""
    def SUFFIX = "\"; // _THE_VERSION_"
    def ver = file(projectDir.getAbsolutePath() + "/base/src/main/java/io/vproxy/base/util/Version.java")
    def lines = ver.getText().split("\n")
    def isMavenLocalInstall = System.getProperty("MavenLocalInstall", "false").equals("true")
    for (def line : lines) {
        line = line.trim()
        if (line.startsWith(PREFIX) && line.endsWith(SUFFIX)) {
            def verstr = line.substring(PREFIX.length(), line.length() - SUFFIX.length())
            if (verstr.endsWith('-DEV')) {
                if (isMavenLocalInstall) {
                    return "MAVEN-LOCAL"
                } else {
                    verstr = verstr + '-' + versionTs + '-SNAPSHOT'
                }
            }
            return verstr
        }
    }
    return "unknown"
}
