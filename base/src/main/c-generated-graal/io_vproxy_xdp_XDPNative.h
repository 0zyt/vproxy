/* DO NOT EDIT THIS FILE - it is machine generated */
/* Header for class io_vproxy_xdp_XDPNative */
#ifndef _Included_io_vproxy_xdp_XDPNative
#define _Included_io_vproxy_xdp_XDPNative
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
}
#endif

#include <jni.h>
#include <pni.h>

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_loadAndAttachBPFProgramToNic(PNIEnv_long * env, char * filepath, char * programName, char * nicName, int32_t mode, uint8_t forceAttach);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_detachBPFProgramFromNic(PNIEnv_void * env, char * nicName);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_findMapByNameInBPF(PNIEnv_long * env, int64_t bpfobj, char * mapName);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_createUMem(PNIEnv_long * env, int32_t chunksSize, int32_t fillRingSize, int32_t compRingSize, int32_t frameSize, int32_t headroom);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_shareUMem(PNIEnv_long * env, int64_t umem);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_getBufferFromUMem(PNIEnv_buf_byte * env, int64_t umem);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_getBufferAddressFromUMem(PNIEnv_long * env, int64_t umem);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_createXSK(PNIEnv_long * env, char * nicName, int32_t queueId, int64_t umem, int32_t rxRingSize, int32_t txRingSize, int32_t mode, uint8_t zeroCopy, int32_t busyPollBudget, uint8_t rxGenChecksum);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_addXSKIntoMap(PNIEnv_void * env, int64_t map, int32_t key, int64_t xsk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_addMacIntoMap(PNIEnv_void * env, int64_t map, void * mac, int64_t xsk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_removeMacFromMap(PNIEnv_void * env, int64_t map, void * mac);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_getFDFromXSK(PNIEnv_int * env, int64_t xsk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_fillUpFillRing(PNIEnv_void * env, int64_t umem);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_fetchPackets0(PNIEnv_int * env, int64_t xsk, int32_t capacity, void * umem, void * chunk, void * ref, void * addr, void * endaddr, void * pktaddr, void * pktlen);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_rxRelease(PNIEnv_void * env, int64_t xsk, int32_t cnt);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_writePacket(PNIEnv_bool * env, int64_t xsk, int64_t chunk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_writePackets(PNIEnv_int * env, int64_t xsk, int32_t size, void * chunkPtrs);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_completeTx(PNIEnv_void * env, int64_t xsk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_fetchChunk0(PNIEnv_bool * env, int64_t umemPtr, void * umem, void * chunk, void * ref, void * addr, void * endaddr, void * pktaddr, void * pktlen);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_setChunk(PNIEnv_void * env, int64_t chunk, int32_t pktaddr, int32_t pktlen, int32_t csumFlags);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_releaseChunk(PNIEnv_void * env, int64_t umem, int64_t chunk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_addChunkRefCnt(PNIEnv_void * env, int64_t chunk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_releaseXSK(PNIEnv_void * env, int64_t xsk);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_releaseUMem(PNIEnv_void * env, int64_t umem, uint8_t releaseBuffer);
JNIEXPORT int JNICALL Java_io_vproxy_xdp_XDPNative_releaseBPFObject(PNIEnv_void * env, int64_t bpfobj);

#ifdef __cplusplus
}
#endif
#endif // _Included_io_vproxy_xdp_XDPNative
// metadata.generator-version: pni 22.0.0.17
// sha256:a1badc09448cc840cc5d7f93e6c2f7cf923dae3090b845789b91ccdeb8b3cd5d
