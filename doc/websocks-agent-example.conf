{
  #
  # Configuration related to the agent and local machine settings
  #
  agent {
    #
    # The listening socks5 port
    # The field is optional, if not specified or set to 0, socks5 will be disabled.
    #
    socks5.listen = 1080

    #
    # The listening http connect port
    # The field is optional, if not specified or set to 0, http connect will be disabled.
    #
    httpconnect.listen = 18080

    #
    # The listening ss port
    # The field is optional, if not specified or set to 0, ss will be disabled.
    # Note: only aes-256-cfb is supported
    #
    ss.listen = 8388
    #
    # The password for ss
    # The field is required if agent.ss.listen is set.
    #
    ss.password = '123456'

    #
    # The listening dns server port
    # The field is optional, if not specified or set to 0, dns server will be disabled
    #
    dns.listen = 53

    tls-sni-erasure {
      #
      # Enable auto certificate signing for tls-sni-erasure. Default: empty configuration
      # Omit the config to disable auto-signing
      # This requires your platform to have a standard version of openssl command-line apps installed,
      # and configured in environment variables ($PATH).
      # OpenSSL is installed by default on Linux and MacOS, not on Windows.
      #
      # Also note that, since the certs are generated when request comes, the first request of a new domain MIGHT
      # fail because the `NotBefore` field in the x509 cert is set AFTER request begins. Retry the request and everything
      # will be OK.
      #
      # The first variable should be the ca cert.
      # The second variable should be the ca private key.
      # The third variable can be omitted, which means the working directory used to store the certificates/keys.
      # When the third variable is omitted, a temporary directory will be allocated on startup.
      #
      # Go to misc/ca directory and use the provided script to generate your own ca.
      #
      cert-key.auto-sign = [ ~/ca.cert.pem, ~/ca.key.pem ]

      #
      # The certificate used by tls-sni-erasure.
      # If you do not want to enable auto ca, this list give you the ability to directly set the certs/keys to be used
      # The list is optional.
      # Each line represents one cert(s)|key tuple for one domain, and private key must be the last file on each line
      #
      # Theses self signed ca and certs can be generated using the scripts provided in misc/ca directory.
      #
      cert-key.list = [
        [~/pixiv.cert.pem, ~/pixiv.key.pem]
        [~/google.cert.pem, ~/google.key.pem]
      ]

      #
      # The list of domains that need to do HTTPS SNI Erasure.
      # This list is optional.
      # Requests to :80 will be redirected to :443
      # Requests to :443 will be terminated and will start a different https request
      # Then make proxy from one tls connection to another
      # Note that the new tls connection will not send sni
      # When this list is set, one of `cert-key` list OR `auto-sign` must be set as well
      #
      # See proxy.groups.domains for domains filtering syntax
      #
      domains = [
        /.*pixiv.*/
      ]
    }

    direct-relay {
      #
      # Enable/Disable the direct-relay. Default false
      # When enabled, the agent will try to listen on 80 and 443 for http and https,
      # and the domains defined in `tls-sni-erasure.domains` and `proxy.domain.list` will be resolved to the agent.
      #
      # Note: enabling this function requires root privilege
      #
      enabled = false

      #
      # Set the ip range used for the agent to listen, resolve and handle proxy. Default empty.
      # The agent will handle all ips and ports(1-65535) in the ip range, dns server will resolve domains on these ips.
      #
      # Note: This feature only works on linux systems supporting tproxy. Local route table and iptables should be set accordingly.
      # Note: the network connectivity of clients to these ips should be guaranteed by user, usually put them in the same L2 network would be fine.
      #
      # Omit this field will disable this feature. The agent will only bind on 80 and 443.
      # If this field is set, then you should set the `agent.direct-relay.listen` as well, and turn on `agent.direct-relay`
      #
      ip-range = 100.64.0.0/10

      #
      # Set the ip and port for the agent to listen for all ip and ports defined in ip-range. Default empty
      # The agent will handle all ips and ports(1-65535) in the ip range, dns server will resolve domains on these ips.
      #
      # Note: This feature only works on linux systems supporting tproxy. Local route table and iptables should be set accordingly.
      # Note: the network connectivity of clients to these ips should be guaranteed by user, usually put them in the same L2 network would be fine.
      #
      # Omit this field will disable this feature. The agent will only bind on 80 and 443.
      # If this field is set, then you should set the `agent.direct-relay.ip-range` as well, and turn on `agent.direct-relay`
      #
      listen = 127.0.0.1:8888

      #
      # Set the timeout for an ip bond. Default 10 minutes.
      # Will not be working if `agent.direct-relay.ip-range` and `agent.direct-relay.listen` not set.
      # Set to 0 or negative will disable the timeout, you have to make sure the ip-range large enough.
      #
      ip-bond-timeout = 10
    }

    #
    # These two fields are optional if your server is using a valid certificate
    # Otherwise these fields should be set to trust your server.
    #
    # Note: the cacerts file should be in JKS format, use keytool to generate one.
    #
    cacerts.path = ./dep/cacerts
    cacerts.pswd = changeit

    #
    # This field is optional, default `true`.
    # Set to `true` to let the vproxy verify whether server certificate is valid.
    # Note: When setting to `false`, the vproxy will log a warning every time new tls connection establishes.
    #
    cert.verify = true

    #
    # This field is optional, default to `false`
    # When enabled, the agent will listen on 0.0.0.0 instead of 127.0.0.1.
    # This option turns your host into a socks5 gateway.
    # However you should know that password is not supported.
    #
    gateway = true

    #
    # This field is optional
    # Specify the pac server's ip address and listening port.
    #
    # NOTE: usually, you need to set agent.gateway to true
    #
    gateway.pac.listen = 20080

    #
    # This field is optional, default to `false`
    # When enabled, all net flow follows specifications of the sub protocols
    # Otherwise an optimization may apply
    # It's recommended to turn off this flag if network rtt is high
    #
    strict = false

    #
    # This field is optional, default to `10`
    # Set the connection pool size.
    # You can set this field to 0 to disable pooling
    #
    pool = 10

    uot {
      #
      # This field is optional, default to `false`
      # This field only works for `websocks:uot:...` or `websockss:uot:...` servers.
      #
      # Requires a latest linux version, >= 5.4 is tested, >= 5.10 is recommended.
      # Usually you need to run a latest hypervisor based vm (multipass is recommended).
      # (WSL2 based distributions won't work because Microsoft disables XDP in WSL kernels)
      #
      # When enabled, UDP (usually KCP protocol) packets will be encapsulated into tcp.
      # This also requires the server to set uot.* options.
      # Also enabling this option will limit worker threads to 1 due to vproxy vswitch thread model.
      #
      # Note that your server supplier may not support upgrading kernel, contact them before upgrading.
      #
      # See also `agent.uot.nic`, `proxy.groups.servers`
      #
      enabled = false

      #
      # Only effective when `agent.uot` is enabled
      # This field is optional, default to `eth0` if uot is enabled.
      # The nic to send/receive special tcp packets.
      #
      # Note that when the agent is running, tcp packets with dst port 30720-32767
      # will not be received from this nic. It's ok in most cases because most
      # linux distributions use 32768-60999 as net.ipv4.ip_local_port_range.
      #
      nic = eth0
    }

    # quic related options
    quic {
      #
      # This field is optional, default to `false`
      # This field only works for `websocks:quic:...` servers.
      #
      # Currently only Linux and macOS supports Quic transport.
      # Currently, settings this option will limit the worker threads to 1 due to implementation issues
      #
      enabled = false

      #
      # Only effective when `agent.quic` is enabled
      # This field is optional.
      #
      # If set, this option must point to a PEM certificate file,
      # which will be used as CA certificate for Quic.
      #
      cacerts = null
    }
  }

  #
  # Proxy related settings
  #
  proxy {
    #
    # The username and password pair separated by a `:`
    #
    auth = alice:pasSw0rD

    #
    # Whether to do health check on servers
    # default: true
    #
    hc = true

    groups = [
    #
    # ABOUT NAMES:
    #
    # Names can be attached to `proxy.group`.
    # If not attached with any name, the name will be set to "DEFAULT".
    #
    # When a request arrives, the agent will check for domain in all domain lists
    # (however, the order is an undefined behavior, except that DEFAULT list is always checked last).
    # If any rule matches, the agent will retrieve the symbol of the list which contains the matched rule.
    # Then the agent will get the SERVER list with the SAME name attached,
    # and will get a healthy server from the server list to handle the proxy.
    #
    # If multiple groups share the same name, then all of their lists are combined.
    #
      {
        #
        # The list of proxy server address
        # use websocks:// for tcp connections
        # use websockss:// for tls connections
        # use websocks:kcp:// for unencrypted kcp connections
        # use websockss:kcp:// for tls encrypted kcp connections
        # (protocols below require you to enable `agent.uot`)
        # use websocks:uot:kcp:// for unencrypted udp over tcp kcp connections
        # use websockss:uot:kcp:// for encrypted udp over tcp kcp connections
        # (protocols below require you to enable `agent.quic`)
        # use websocks:quic:// for quic connections
        #
        # This `proxy.server.list.start` example statement is not followed by any symbol,
        # which will automatically append a `DEFAULT` symbol by the agent.
        #
        # NOTE: port should ALWAYS be specified, even if it's 80 or 443
        #
        servers = [
          websockss://127.0.0.1:18686
          websockss:kcp://example.com:443
        ]

        #
        # The list of domains which DO require proxying.
        # This `proxy.domain.list.start` example statement is not followed by any symbol,
        # which will automatically append a `DEFAULT` symbol by the agent.
        #
        # The elements of the list allows:
        # 1. domain suffix, plain text, e.g. youtube.com
        # 2. ip addresses text strings
        # 3. regexp, surrounded by two `/`, e.g. /.*google\.com.*/
        # 4. base64 encoded abp file, surrounded by `[` and `]`, e.g. [~/gfwlist.txt]
        #    if the expression is in the form: `[https://]` or `[http://]`, then an http
        #    GET request will be made to get the file
        # 5. port number, started by `:`, e.g. :22, to proxy ssh traffic via the proxy
        #
        domains = [
          /.*google\.com.*/
          216.58.200.46
          youtube.com
          zh.wikipedia.org
          id.heroku.com
          baidu.com
          /.*bilibili\.com$/
        ]

        #
        # The list of domains that need to be resolved on the server side.
        # This list is optional.
        # Supports all syntax in the domain list
        #
        resolve = [
          pixiv.net
        ]

        #
        # The list of domains that do NOT need to go through proxy, which can be used as a whitelist
        # This list is optional.
        # Supports all syntax in the domain list
        #
        no-proxy = [
          /.*pixiv.*/
        ]
      }
      {
        #
        # This group example is attached with a name `TEST`.
        #
        name = TEST
        servers = [
          websocks://127.0.0.1:18687
        ]

        #
        # Domains which require proxying in group `TEST`
        #
        domains = [
          :14000
          163.com
        ]
      }
    ]
  }
}
